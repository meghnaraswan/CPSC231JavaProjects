//StudentRecord.java

public class StudentRecord {
  //these are the member variables, or the attibutes of a class
  private double firstQuiz;
  private double secondQuiz;
  private double thirdQuiz;
  private double midtermExam;
  private double finalExam;

  //constructors: will create an instance/object of the class
  //this is the default constructor, which is automatically generated by the compiler if there is no parameterized construtor written by the user
  public StudentRecord() {
    firstQuiz = 0.0;
    secondQuiz = 0.0;
    thirdQuiz = 0.0;
    midtermExam = 0.0;
    finalExam = 0.0;
  }

   //this is the overloaded constructor
   //this is for when creating the object, you know the information you want to pass
   //in this case, we need to pass the student's first, second, and third quiz, midterm, and final
  public StudentRecord(double studentFirstQuiz, double studentSecondQuiz, double studentThirdQuiz, double studentMidtermExam, double studentFinalExam) {
    firstQuiz = studentFirstQuiz;
    secondQuiz = studentSecondQuiz;
    thirdQuiz = studentThirdQuiz;
    midtermExam = studentMidtermExam;
    finalExam = studentFinalExam;
  }

  //accessors and mutators are used for all member varibles

  //this is an accessor, which accesses and returns a value, but may not modify a class' fields
  //accessor for the first quiz
   public double getFirstQuiz() {
      return firstQuiz;
   }

   //accessor for the second quiz
   public double getSecondQuiz() {
      return secondQuiz;
   }

   //accessor for the third quiz
   public double getThirdQuiz() {
      return thirdQuiz;
   }

   //accessor for the midterm
   public double getMidtermExam() {
      return midtermExam;
   }

   //accessor for the final
   public double getFinalExam() {
      return finalExam;
   }

   //this is a public method that returns a double of the student’s score
   public double computeNumericScore() {
     double quizTotal = firstQuiz + secondQuiz + thirdQuiz; //calculate the total of all 3 quizzes
     double quizAvgPercentage = (quizTotal / 30) * 100; //find the overall percentage of the 3 quizzes divided by the total amount of points, wich would be 30 in this case
     double numericScore = ((quizAvgPercentage * 0.25) + (midtermExam * 0.35) + (finalExam * 0.40)); //find the weighted score by taking each exam or total quiz score (whcih would be a value from 0-100) and multiplying each score by its corresonding weighted percentage
     return numericScore; //return the total numeric score the student has in the class
   }

  //this is a public method that returns the letter grade the student has based on his or her numeric score.
  //in order to do this we need to pass the numeric score as the parameter
  public char computeLetterGrade(double numericScore) {
    char letterGrade;
    if (numericScore >= 90) { //if the numeric score is greater than or equal to 90, the letter grade will be an A
      letterGrade = 'A';
    }
    else if (numericScore >= 80) { //if the numeric score is greater than or equal to 80, the letter grade will be an B
      letterGrade = 'B';
    }
    else if (numericScore >= 70) { //if the numeric score is greater than or equal to 70, the letter grade will be an C
      letterGrade = 'C';
    }
    else if (numericScore >= 60) { //if the numeric score is greater than or equal to 60, the letter grade will be an D
      letterGrade = 'D';
    }
    else { //if the numeric score is less than 60, the letter grade will be an F
      letterGrade = 'F';
    }
    return letterGrade; //return the letter grade the student has in the class
  }

  //this is a public method that returns a String containing an appropriate description of the student’s record
  public String toString() {
    double numericScore = computeNumericScore(); //call the computeNumericScore() method and assign it as a varible named numericScore
    char letterGrade = computeLetterGrade(numericScore); //call the computeLetterGrade() method and pass the numericScore variable as a parameter and assign this method as the variable letterGrade
    return String.format("%.2f percent with a %c letter grade.", numericScore, letterGrade); //return a statement with the student's numeric score and letter grade
  }

  // this is a public method that determines whether two student records are the same and returns a boolean (true or false).
  public boolean equals(StudentRecord s) { //passes an object as a parameter, reassigning it as variable s
    return (this.computeNumericScore() == s.computeNumericScore()); //compares the first object's numeric score with the second object's numeric score by calling the computeNumericScore method, returning a boolean
  }

  public static void main(String[] args) {

    //these create new StudentRecord objects and calls the constructor StudentRecord().
    //these pass first, second, and third quizzes, midterm, and final as parameters
    StudentRecord recordOne = new StudentRecord(9, 7, 10, 85, 93);
    StudentRecord recordNotEquals = new StudentRecord(10, 7, 10, 89, 99);
    StudentRecord recordEquals = new StudentRecord(10, 6, 10, 85, 93);

    //displays all of the student's records by calling the toString method on the objects
    System.out.println("Student 1's Record: " + recordOne.toString()); //calls the toString method on the object, recordOne
    System.out.println("Student 2's Record: " + recordNotEquals.toString()); //calls the toString method on the object, recordNotEquals
    System.out.println("Student 3's Record: " + recordEquals.toString()); //calls the toString method on the object, recordEquals
    System.out.println();

    //compares Student 2's and Student 3's Records with Student 1 to see if the numeric scores are eqaul or not equal by calling the equals method on the objects
    System.out.println("Is Student 1's record equal to Student 2's record: " + recordOne.equals(recordNotEquals)); //calls the equals method on the objects recordOne and recordNotEquals
    System.out.println("Is Student 1's record equal to Student 3's record: " + recordOne.equals(recordEquals)); ////calls the equals method on the objects recordOne and recordEquals

  }
}
